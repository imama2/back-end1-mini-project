// Code generated by MockGen. DO NOT EDIT.
// Source: back-end1-mini-project/repositories (interfaces: SuperAdminRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "back-end1-mini-project/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSuperAdminRepositoryInterface is a mock of SuperAdminRepositoryInterface interface.
type MockSuperAdminRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSuperAdminRepositoryInterfaceMockRecorder
}

// MockSuperAdminRepositoryInterfaceMockRecorder is the mock recorder for MockSuperAdminRepositoryInterface.
type MockSuperAdminRepositoryInterfaceMockRecorder struct {
	mock *MockSuperAdminRepositoryInterface
}

// NewMockSuperAdminRepositoryInterface creates a new mock instance.
func NewMockSuperAdminRepositoryInterface(ctrl *gomock.Controller) *MockSuperAdminRepositoryInterface {
	mock := &MockSuperAdminRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockSuperAdminRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuperAdminRepositoryInterface) EXPECT() *MockSuperAdminRepositoryInterfaceMockRecorder {
	return m.recorder
}

// ApproveAdminRegistration mocks base method.
func (m *MockSuperAdminRepositoryInterface) ApproveAdminRegistration(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveAdminRegistration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveAdminRegistration indicates an expected call of ApproveAdminRegistration.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) ApproveAdminRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveAdminRegistration", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).ApproveAdminRegistration), arg0)
}

// CreateCustomer mocks base method.
func (m *MockSuperAdminRepositoryInterface) CreateCustomer(arg0 *entities.Customer) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) CreateCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).CreateCustomer), arg0)
}

// CreateSuperAdmin mocks base method.
func (m *MockSuperAdminRepositoryInterface) CreateSuperAdmin(arg0 *entities.Account) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSuperAdmin", arg0)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSuperAdmin indicates an expected call of CreateSuperAdmin.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) CreateSuperAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSuperAdmin", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).CreateSuperAdmin), arg0)
}

// DeleteCustomerById mocks base method.
func (m *MockSuperAdminRepositoryInterface) DeleteCustomerById(arg0 uint, arg1 *entities.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerById indicates an expected call of DeleteCustomerById.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) DeleteCustomerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerById", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).DeleteCustomerById), arg0, arg1)
}

// GetAllAdmins mocks base method.
func (m *MockSuperAdminRepositoryInterface) GetAllAdmins(arg0 string, arg1, arg2 int) ([]*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdmins", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAdmins indicates an expected call of GetAllAdmins.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) GetAllAdmins(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdmins", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).GetAllAdmins), arg0, arg1, arg2)
}

// GetAllCustomers mocks base method.
func (m *MockSuperAdminRepositoryInterface) GetAllCustomers(arg0, arg1, arg2 string, arg3, arg4 int) ([]*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomers indicates an expected call of GetAllCustomers.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) GetAllCustomers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomers", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).GetAllCustomers), arg0, arg1, arg2, arg3, arg4)
}

// GetApprovalRequests mocks base method.
func (m *MockSuperAdminRepositoryInterface) GetApprovalRequests() ([]*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApprovalRequests")
	ret0, _ := ret[0].([]*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApprovalRequests indicates an expected call of GetApprovalRequests.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) GetApprovalRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApprovalRequests", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).GetApprovalRequests))
}

// GetCustomerById mocks base method.
func (m *MockSuperAdminRepositoryInterface) GetCustomerById(arg0 uint) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", arg0)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerById indicates an expected call of GetCustomerById.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) GetCustomerById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).GetCustomerById), arg0)
}

// LoginSuperAdmin mocks base method.
func (m *MockSuperAdminRepositoryInterface) LoginSuperAdmin(arg0 string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginSuperAdmin", arg0)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginSuperAdmin indicates an expected call of LoginSuperAdmin.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) LoginSuperAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginSuperAdmin", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).LoginSuperAdmin), arg0)
}

// RejectAdminRegistration mocks base method.
func (m *MockSuperAdminRepositoryInterface) RejectAdminRegistration(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectAdminRegistration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectAdminRegistration indicates an expected call of RejectAdminRegistration.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) RejectAdminRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectAdminRegistration", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).RejectAdminRegistration), arg0)
}

// UpdateAdminActiveStatus mocks base method.
func (m *MockSuperAdminRepositoryInterface) UpdateAdminActiveStatus(arg0 uint, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminActiveStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdminActiveStatus indicates an expected call of UpdateAdminActiveStatus.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) UpdateAdminActiveStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminActiveStatus", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).UpdateAdminActiveStatus), arg0, arg1)
}

// UpdateDeadactivedAdmin mocks base method.
func (m *MockSuperAdminRepositoryInterface) UpdateDeadactivedAdmin(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeadactivedAdmin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeadactivedAdmin indicates an expected call of UpdateDeadactivedAdmin.
func (mr *MockSuperAdminRepositoryInterfaceMockRecorder) UpdateDeadactivedAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeadactivedAdmin", reflect.TypeOf((*MockSuperAdminRepositoryInterface)(nil).UpdateDeadactivedAdmin), arg0)
}
